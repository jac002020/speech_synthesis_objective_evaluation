
DEBUGGING=0;

EVALHOME='/teamwork/t40511_asr/u/rkarhila/speech_synthesis_objective_evaluation/';

setenv('PATH', '/teamwork/t40511_asr/Modules/opt/pesq/amd_2/bin/:/teamwork/t40511_asr/Modules/opt/sptk/3.5/bin:/teamwork/t40511_asr/Modules/opt/hts/2.3alpha/bin:/home/rkarhila/bin:/usr/lib/lightdm/lightdm:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/sbin:/usr/local/bin:/opt/bin:/p/bin:/home/rkarhila/bin')



addpath ([ EVALHOME, '/scripts'])
addpath ([ EVALHOME, '/include/columbia_ee_dtw'])
addpath ([ EVALHOME, '/include/voicebox'])
addpath ([ EVALHOME, '/include/colea'])
addpath ([ EVALHOME, '/include/gmmbayestb-v1.0'])

addpath ([ EVALHOME, '/include/export_fig'])
addpath ([ EVALHOME, '/include/rasta'])


USE_STRAIGHT        = 1;

if USE_STRAIGHT == 1
    % Include the STRAIGHT script path:
    addpath /teamwork/t40511_asr/Modules/opt/STRAIGHT/V40_003
end


USE_PESQ = 1;

if USE_PESQ == 1;
    addpath ([ EVALHOME, '/include/matlab-pesq-wrapper']);
    warning('off','MATLAB:audiovideo:wavwrite:functionToBeRemoved');
    pesq_scorecount=3;
else
    pesq_scorecount=0;
end

CACHE_FEATURES = 1;
CACHE_STRAIGHT = 1;
LOCAL_FEATDIR ='/l/rkarhila/scratch/blizzard_eval_scratch/feat/';


%Save copies of distance maps for DTW testing
CACHE_DISTMAPS = 1;
LOCAL_MAPDIR   ='/l/rkarhila/scratch/blizzard_eval_scratch/distmaps/';


LOCAL_MIXTUREMODELDIR   ='/l/rkarhila/scratch/blizzard_eval_scratch/gmms/';




BLIZZARD2008_RESULTDIR = '/teamwork/t40511_asr/p/synthesis/blizzard_results/blizzard_wavs_and_scores_2008_release_version_1/';
BLIZZARD2009_RESULTDIR = '/teamwork/t40511_asr/p/synthesis/blizzard_results/blizzard_wavs_and_scores_2009_release_version_1/';
BLIZZARD2010_RESULTDIR = '/teamwork/t40511_asr/p/synthesis/blizzard_results/blizzard_wavs_and_scores_2010_release_version_1/';
BLIZZARD2011_RESULTDIR = '/teamwork/t40511_asr/p/synthesis/blizzard_results/blizzard_wavs_and_scores_2011_release_version_1/';
BLIZZARD2012_RESULTDIR = '/teamwork/t40511_asr/p/synthesis/blizzard_results/blizzard_wavs_and_scores_2012/afs/.inf.ed.ac.uk/group/blizzard/blizzard_2012/analysis/distribution/full_distribution/';
BLIZZARD2013_RESULTDIR = '/teamwork/t40511_asr/p/synthesis_/blizzard_results/blizzard_wavs_and_scores_2013_release_version_1/';
%BLIZZARD2009_RESULTDIR = '/akulabra/projects/T40511/synthesis/blizzard_results/blizzard_wavs_and_scores_2009_release_version_1/'



%
%   Methods and parameters:
%


audio_preprosessing1.name='audio_preprosessing1';
audio_preprosessing1.fs = 16000;
audio_preprosessing1.vad_function = @simple_vad;
audio_preprosessing1.function=@prepare_audio;
audio_preprosessing1.frame_ms = 25;
audio_preprosessing1.step_ms =  10;

fft_fws_distance1.name='fft_fws_distance1';
fft_fws_distance1.analysisfunction=@analysis_fft_for_fwsnrseg;
fft_fws_distance1.distancefunction=@dist_fwsnrseg; 
fft_fws_distance1.fs = 16000;
fft_fws_distance1.frame_ms = 25;
fft_fws_distance1.step_ms =  10;
fft_fws_distance1.spectrum_dim = 1024;
fft_fws_distance1.cep_dim = 13;
fft_fws_distance1.mel_dim = 21;
fft_fws_distance1.gamma1 = 0.2;

straight_fws_distance1.name='fft_straight_distance1';
straight_fws_distance1.analysisfunction=@analysis_straight_for_fwsnrseg;
straight_fws_distance1.distancefunction=@dist_fwsnrseg; 
straight_fws_distance1.F0frameUpdateInterval  = 10;  
straight_fws_distance1.F0searchUpperBound     = 450;
straight_fws_distance1.F0searchLowerBound     = 40;     
straight_fws_distance1.spectralUpdateInterval = 10;   
straight_fws_distance1.fs                     = 16000;
straight_fws_distance1.gamma1                 = 0.2;
straight_fws_distance1.mel_dim                = 21;
straight_fws_distance1.spectrum_dim           = 1024;



invasive_tests= { ...
    struct('preprocessing', audio_preprosessing1, ...
           'map_feature', fft_fws_distance1 , ...
           'path_feature', fft_fws_distance1 , ...
           'name','Distortion: dtw with fft-snr, path cost with fft-snr' ),...
           ...
    struct('preprocessing', audio_preprosessing1, ...
           'map_feature', straight_fws_distance1 , ...
           'path_feature', straight_fws_distance1 , ...
           'name','Distortion: dtw with straight-snr, path cost with straight-snr' ),...           
           ...
    struct('preprocessing', audio_preprosessing1, ...
           'map_feature', straight_fws_distance1 , ...
           'path_feature', fft_fws_distance1 , ...
           'name','Distortion: dtw with straight-snr, path cost with fft-snr' ),...            
            ...
    struct('preprocessing', audio_preprosessing1, ...
           'map_feature', fft_fws_distance1 , ...
           'path_feature', straight_fws_distance1 , ...
           'name','Distortion: dtw with fft-snr, path cost with straight-snr' )...           
           };

       
% invasive_tests= { ...
%     struct('map_feature',{{'fft','snr'}}, 'path_feature',{{'fft','snr'}},       'name','Distortion: dtw map with fft-snr, path with fft-snr' ), ...
%     struct('map_feature',{{'fft','snr'}}, 'path_feature',{{'straight','snr'}},  'name','Distortion: dtw map with fft-snr, path with straight-snr' ), ...    
%     struct('map_feature',{{'fft','snr'}}, 'path_feature',{{'fft','mcd'}},       'name','Distortion: dtw map with fft-snr, path with fft-mcd' ), ...    
%     struct('map_feature',{{'fft','snr'}}, 'path_feature',{{'straight','mcd'}},  'name','Distortion: dtw map with fft-snr, path with straight-mcd' ), ...
%     struct('map_feature',{{'fft','snr'}}, 'path_feature',{{'llr',''}},             'name','Distortion: dtw map with fft-snr, path with llr' ), ...    
%     ...    
%     struct('map_feature',{{'straight','snr'}}, 'path_feature',{{'fft','snr'}},      'name','Distortion: dtw map with straight-snr, path with fft-snr' ), ...
%     struct('map_feature',{{'straight','snr'}}, 'path_feature',{{'straight','snr'}}, 'name','Distortion: dtw map with straight-snr, path with straight-snr' ), ...    
%     struct('map_feature',{{'straight','snr'}}, 'path_feature',{{'fft','mcd'}},      'name','Distortion: dtw map with straight-snr, path with fft-mcd' ), ...    
%     struct('map_feature',{{'straight','snr'}}, 'path_feature',{{'straight','mcd'}}, 'name','Distortion: dtw map with straight-snr, path with straight-mcd' ), ...
%     struct('map_feature',{{'straight','snr'}}, 'path_feature',{{'llr',''}},            'name','Distortion: dtw map with straight-snr, path with llr' ), ...    
%     ...    
%     struct('map_feature',{{'fft','mcd'}}, 'path_feature',{{'fft','snr'}},       'name','Distortion: dtw map with fft-mcd, path with fft-snr' ), ...
%     struct('map_feature',{{'fft','mcd'}}, 'path_feature',{{'straight','snr'}},  'name','Distortion: dtw map with fft-mcd, path with straight-snr' ), ...    
%     struct('map_feature',{{'fft','mcd'}}, 'path_feature',{{'fft','mcd'}},       'name','Distortion: dtw map with fft-mcd, path with fft-mcd' ), ...    
%     struct('map_feature',{{'fft','mcd'}}, 'path_feature',{{'straight','mcd'}},  'name','Distortion: dtw map with fft-mcd, path with straight-mcd' ), ...
%     struct('map_feature',{{'fft','mcd'}}, 'path_feature',{{'llr',''}},             'name','Distortion: dtw map with fft-mcd, path with llr' ), ...    
%     ...    
%     struct('map_feature',{{'straight','mcd'}}, 'path_feature',{{'fft','snr'}},      'name','Distortion: dtw map with straight-mcd, path with fft-snr' ), ...
%     struct('map_feature',{{'straight','mcd'}}, 'path_feature',{{'straight','snr'}}, 'name','Distortion: dtw map with straight-mcd, path with straight-snr' ), ...    
%     struct('map_feature',{{'straight','mcd'}}, 'path_feature',{{'fft','mcd'}},      'name','Distortion: dtw map with straight-mcd, path with fft-mcd' ), ...    
%     struct('map_feature',{{'straight','mcd'}}, 'path_feature',{{'straight','mcd'}}, 'name','Distortion: dtw map with straight-mcd, path with straight-mcd' ), ...
%     struct('map_feature',{{'straight','mcd'}}, 'path_feature',{{'llr',''}},            'name','Distortion: dtw map with straight-mcd, path with llr' ), ...    
%     ...    
%     struct('map_feature',{{'llr',''}}, 'path_feature',{{'fft','snr'}},      'name','Distortion: dtw map with llr, path with fft-snr' ), ...
%     struct('map_feature',{{'llr',''}}, 'path_feature',{{'straight','snr'}}, 'name','Distortion: dtw map with llr, path with straight-snr' ), ...    
%     struct('map_feature',{{'llr',''}}, 'path_feature',{{'fft','mcd'}},      'name','Distortion: dtw map with llr, path with fft-mcd' ), ...    
%     struct('map_feature',{{'llr',''}}, 'path_feature',{{'straight','mcd'}}, 'name','Distortion: dtw map with llr, path with straight-mcd' ), ...
%     struct('map_feature',{{'llr',''}}, 'path_feature',{{'llr',''}},            'name','Distortion: dtw map with llr, path with llr' ) ...    
    %
    % Add your own method here:
    % struct('map_feature',{{'your-spectrum-exraction-method','your-feature-method'}}, 'path_feature',{{'your-spectrum-exraction-method','your-feature-method'}},
    %       'name','Distortion: dtw map with a new superior method, path with the same' ) ...                
    %
    %};


fft_melbank1.name='fft_melbank_analysis';
fft_melbank1.analysisfunction=@analysis_fft_melbank;
fft_melbank1.fs = 16000;
fft_melbank1.frame_ms = 25;
fft_melbank1.step_ms =  10;
fft_melbank1.spectrum_dim = 1024;
fft_melbank1.cep_dim = 13;
fft_melbank1.mel_dim = 21;
fft_melbank1.usedelta = 1;


straight_melbank1.name='straight_melbank_analysis';
straight_melbank1.analysisfunction=@analysis_straight_melbank;
straight_melbank1.fs = 16000;
straight_melbank1.frame_ms = 25;
straight_melbank1.step_ms =  10;
straight_melbank1.spectrum_dim = 1024;
straight_melbank1.cep_dim = 13;
straight_melbank1.mel_dim = 21;
straight_melbank1.usedelta = 1;


fft_mfcc1.name='fft_mfcc_analysis';
fft_mfcc1.analysisfunction=@analysis_fft_mfcc;
fft_mfcc1.fs = 16000;
fft_mfcc1.frame_ms = 25;
fft_mfcc1.step_ms =  10;
fft_mfcc1.spectrum_dim = 1024;
fft_mfcc1.cep_dim = 13;
fft_mfcc1.mel_dim = 21;
fft_mfcc1.usedelta = 1;


straight_mfcc1.name='straight_mfcc_analysis';
straight_mfcc1.analysisfunction=@analysis_straight_mfcc;
straight_mfcc1.fs = 16000;
straight_mfcc1.frame_ms = 25;
straight_mfcc1.step_ms =  10;
straight_mfcc1.spectrum_dim = 1024;
straight_mfcc1.cep_dim = 13;
straight_mfcc1.mel_dim = 21;
straight_mfcc1.usedelta = 1;

gmm_diag_10_comp1.name='GMM_diagonal_10_comp';
gmm_diag_10_comp1.cov_type='diag';
gmm_diag_10_comp1.num_components=10;
gmm_diag_10_comp1.trainfunction=@model_train_gmm;
gmm_diag_10_comp1.testfunction=@model_test_gmm;
gmm_diag_10_comp1.gauss_retr = 3;



    
non_invasive_tests = { ...       
      struct('preprocessing', audio_preprosessing1, ...
           'analysis', fft_melbank1 , ...
           'modelling', gmm_diag_10_comp1 , ...
           'name','GMM 10 comp diag. cov. of FFT based log-Mel banks' )};     

    
    
%gaussmethods= { { 'straight', 'log-mel' }, ...
%                { 'fft', 'log-mel'}, ...
%                { 'straight', 'mcd' }, ...
%                { 'fft', 'mcd'} };
%                
%gausstypes={'diag', 'full'};
%
%gausscomps={[10,30,50], [1,3,5]};        


%     struct('feature',{{'straight','log-mel'}}, 'cov_type','diag','num_comps',10,'name','GMM: feature straight-log-mel, diagonal covariance, 10 components'), ...
%     struct('feature',{{'straight','log-mel'}}, 'cov_type','diag','num_comps',30,'name','GMM: feature straight-log-mel, diagonal covariance, 30 components'), ...
%     struct('feature',{{'straight','log-mel'}}, 'cov_type','diag','num_comps',50,'name','GMM: feature straight-log-mel, diagonal covariance, 50 components'), ...
%     struct('feature',{{'straight','log-mel'}}, 'cov_type','full','num_comps',1,'name','GMM: feature straight-log-mel, full covariance, 1 components'), ...
%     struct('feature',{{'straight','log-mel'}}, 'cov_type','full','num_comps',3,'name','GMM: feature straight-log-mel, full covariance, 3 components'), ...
%     struct('feature',{{'straight','log-mel'}}, 'cov_type','full','num_comps',5,'name','GMM: feature straight-log-mel, full covariance, 5 components'), ...
%     ...
%     struct('feature',{{'fft','log-mel'}}, 'cov_type','diag','num_comps',10,'name','GMM: feature fft-log-mel, diagonal covariance, 10 components'), ...
%     struct('feature',{{'fft','log-mel'}}, 'cov_type','diag','num_comps',30,'name','GMM: feature fft-log-mel, diagonal covariance, 30 components'), ...
%     struct('feature',{{'fft','log-mel'}}, 'cov_type','diag','num_comps',50,'name','GMM: feature fft-log-mel, diagonal covariance, 50 components'), ...
%     struct('feature',{{'fft','log-mel'}}, 'cov_type','full','num_comps',1,'name','GMM: feature fft-log-mel, full covariance, 1 components'), ...
%     struct('feature',{{'fft','log-mel'}}, 'cov_type','full','num_comps',3,'name','GMM: feature fft-log-mel, full covariance, 3 components'), ...
%     struct('feature',{{'fft','log-mel'}}, 'cov_type','full','num_comps',5,'name','GMM: feature fft-log-mel, full covariance, 5 components'), ...
%     ...    
%     struct('feature',{{'straight','mcd'}}, 'cov_type','diag','num_comps',10,'name','GMM: feature straight-mcd, diagonal covariance, 10 components'), ...
%     struct('feature',{{'straight','mcd'}}, 'cov_type','diag','num_comps',30,'name','GMM: feature straight-mcd, diagonal covariance, 30 components'), ...
%     struct('feature',{{'straight','mcd'}}, 'cov_type','diag','num_comps',50,'name','GMM: feature straight-mcd, diagonal covariance, 50 components'), ...
%     struct('feature',{{'straight','mcd'}}, 'cov_type','full','num_comps',1,'name','GMM: feature straight-mcd, full covariance, 1 components'), ...
%     struct('feature',{{'straight','mcd'}}, 'cov_type','full','num_comps',3,'name','GMM: feature straight-mcd, full covariance, 3 components'), ...
%     struct('feature',{{'straight','mcd'}}, 'cov_type','full','num_comps',5,'name','GMM: feature straight-mcd, full covariance, 5 components'), ...
%     ...    
%     struct('feature',{{'fft','mcd'}}, 'cov_type','diag','num_comps',10,'name','GMM: feature fft-mcd, diagonal covariance, 10 components'), ...
%     struct('feature',{{'fft','mcd'}}, 'cov_type','diag','num_comps',30,'name','GMM: feature fft-mcd, diagonal covariance, 30 components'), ...
%     struct('feature',{{'fft','mcd'}}, 'cov_type','diag','num_comps',50,'name','GMM: feature fft-mcd, diagonal covariance, 50 components'), ...
%     struct('feature',{{'fft','mcd'}}, 'cov_type','full','num_comps',1,'name','GMM: feature fft-mcd, full covariance, 1 components'), ...
%     struct('feature',{{'fft','mcd'}}, 'cov_type','full','num_comps',3,'name','GMM: feature fft-mcd, full covariance, 3 components'), ...
%     struct('feature',{{'fft','mcd'}}, 'cov_type','full','num_comps',5,'name','GMM: feature fft-mcd, full covariance, 5 components') ...
%     };

% In case the Gaussian training leads to singular components, we can retry it a few times:
gauss_retries=3; 



if USE_PESQ==1
    pesq_tests= { struct('name','PESQ Narrowband MOS'), ...
                  struct('name','PESQ Narrowband MOS LQC'), ...
                  struct('name','PESQ Wideband MOS LQC')
                  };
else
    pesq_tests = {};
end


testlist=[invasive_tests,non_invasive_tests,pesq_tests];

curve_smoothing_coeff=0.6;




