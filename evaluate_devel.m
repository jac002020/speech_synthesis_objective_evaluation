%
% Evaluate our development set 2009 EH2 
%

local_conf

if (isempty(gcp('nocreate')))
    %parpool;
end
   

tests_devel={ ...
    struct( ...
        'name',                  'EH2_similarity',...
        'objective_resultfile',  'devel/2009_EH2_objective_results_sim',...
        'testfilelist',          'devel/2009_EH2_sim.test.scp',...
        'reffilelist',           'devel/2009_EH2_sim.ref.scp',...
        'subjective_resultfile', 'devel/2009_EH2_sim_mean.ascii',...
        'opinionmatrix',         'blizzard_tests/significancematrix_2009_EH2_sim.ascii',...
        'systems',               'BCDEHIJKLMOPQRSTUW', ...
        'systemtypes',           'chhccccchchhcchu-h', ...
        'sentencesperspeaker',    19, ...
        'testtype',               'sim', ...
        'language',               'english', ...
        'speaker',                'roger', ...
        'scores',                 [], ...
        'results',                []), ... 
    struct( ...
        'name',                  'EH2_naturalness',...
        'objective_resultfile',  'devel/2009_EH2_objective_results_nat',...
        'testfilelist',          'devel/2009_EH2_nat.test.scp',...
        'reffilelist',           'devel/2009_EH2_nat.ref.scp',...
        'subjective_resultfile', 'devel/2009_EH2_sim_mean.ascii',...
        'opinionmatrix',         'blizzard_tests/significancematrix_2009_EH2_nat.ascii',...
        'systems',               'BCDEHIJKLMOPQRSTUW', ...
        'systemtypes',           'chhccccchchhcchu-h', ...
        'sentencesperspeaker',    19, ...
        'testtype',               'nat', ...
        'language',               'english', ...
        'speaker',                'roger', ...
        'scores',                 [], ...
        'results',                []) ... 
        };


    
 
for n=1:length(tests_devel)
    if exist(tests_devel{n}.objective_resultfile, 'file') == 0;   
%       [ invasive_measure_result, non_invasive_measure_result, pesq_result, test_runtime] = ...
%            obj_evaluation(BLIZZARD2009_RESULTDIR, tests_devel{n}.reffilelist,tests_devel{n}.testfilelist);

       [ invasive_measure_result, test_runtime] = ...
            evaluate_with_invasive_measures(BLIZZARD2009_RESULTDIR, tests_devel{n}.reffilelist,tests_devel{n}.testfilelist);        
        

        objdata=[ invasive_measure_result, non_invasive_measure_result, pesq_result ];
        save(tests_devel{n}.objective_resultfile, 'objdata','-ascii');
        tests_devel{n}.results=objdata;
    else      
        disp(['Loading results from ',tests_devel{n}.objective_resultfile])
        tests_devel{n}.results=load(tests_devel{n}.objective_resultfile);
        
    end
    
    tests_devel{n}.scores=evaluate_wilcoxon(tests_devel{n}.results, load(tests_devel{n}.subjective_resultfile), load(tests_devel{n}.opinionmatrix), ...
                               tests_devel{n}.systems, 0);
end

    
